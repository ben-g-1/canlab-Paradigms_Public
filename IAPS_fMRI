% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %
% %         IAPS PATTERN EXPRESSION PARADIGM SETTINGS    %
% %         WagerLab: Luke & Marianne                    %
% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% %

clear all;close all;sca;

% to do:
%% saving data files to wrong folder
%%%%%%%%%%%%%%%%%%%%%
%% SETTINGS
%%%%%%%%%%%%%%%%%%%%%
%% paths
imagedir='/Users/maus/Documents/MATLAB/images';
addpath(imagedir);
% addpath(genpath('/Applications/Psychtoolbox'));
% addpath(genpath('/Users/maus/CANLabRepos'));
%% using physio?
use_biopac=0;
use_eyelink=0;
BIOPAC_PULSE_WIDTH = 1; %%modify to 4?
%% globals
info.subid=input('Subject ID: ');
backgroundColor = 0; %black
textColor = 87; %grey
info.tr=.46;
info.dummyscans=0; %%
ntrial = 112;
rtrials=ntrial/2;
iti = [];
info.stimdurr=4;
im_list=filenames(sprintf('%s/*',imagedir));
scantrig=5; %5% = 34?
longITI=10; % first ITI before run
% % eye_calib='c';
% % eye_out='o';
% % exper_in='e';
% responseKeys = {scantrig,eye_calib,eye_out,exper_in};
%% open files for wriitng and saving
fname=sprintf('IAPSinfo_%d',info.subid);
flog=sprintf('IAPSlog_%d',info.subid);
datafilename = strcat('IAPS_',num2str(info.subid),'.txt'); % name of data file to write to
% check for existing result file to prevent accidentally overwriting
if fopen(datafilename, 'rt')~=-1
    fclose('all');
    error('Data file already exists! Choose a different subject number.');
else
    datafilepointer = fopen(datafilename,'wt'); % open ASCII file for writing
end
if fopen(fname, 'rt')~=-1
    fclose('all');
    error('Data file already exists! Choose a different subject number.');
end
%% initialize everything
% instructions
instructions= sprintf('During this task you will see different images.\nYou will be asked questions about these images later.\nPlease remain still and alert, and get ready to begin.');
waitScan='Wait for scanner...';
waitExper='Wait for experimenter...';
endrun='You have completed this run.';
endexper='Thank you. You have completed the experiment.';
fixation='+';
% iti durration list
rtrial = 56;
for i = 3:12
    newtrial = ones(round(.5*rtrial),1)*i;
    iti = [iti; newtrial];
    rtrial = rtrial - length(newtrial);
end
randR1ITI=randperm(length(iti));
randR2ITI=randperm(length(iti));
for i=1:length(iti)
    r1ITI(i)=iti(randR1ITI(i));
    r2ITI(i)=iti(randR2ITI(i));
end
info.R1ITI=r1ITI';
info.R2ITI=r2ITI';
% image list
for i=1:length(im_list)
    [path, tag, ext] = fileparts(char(im_list(i)));
%     images{i}=sprintf('%s%s',tag,ext);
    images{i}=sprintf('%s',tag);%no ext
end
randomim=randperm(length(images));
for i=1:length(images)
    imageorder(i)=images(randomim(i));
end
info.images=imageorder';
n_r1trials=length(imageorder)/2;
n_r2trials=length(imageorder)/2;
if n_r1trials ~= 56
    error(sprintf('error in run 1 trial length... %d',n_r1trials))
elseif n_r2trials ~= 56
    error(sprintf('error in run 2 trial length... %d',n_r2trials))
end 
info.R1Images=info.images(1:n_r1trials); 
info.R2Images=info.images(n_r2trials+1:end);
% rand num gen
rand('state', sum(100*clock)); % Initialize the random number generator

%% Keyboard setup
KbName('UnifyKeyNames');
% KbCheckList = [KbName('space'),KbName('ESCAPE')];
% for i = 1:length(responseKeys)
%     KbCheckList = [KbName(responseKeys{i}),KbCheckList];
% end
% RestrictKeysForKbCheck(KbCheckList);

%% Screen setup
% will break with error message if Screen() can't run
AssertOpenGL;
clear screen
whichScreen = max(Screen('Screens'));
[window1, rect] = Screen('Openwindow',whichScreen,backgroundColor,[],[],2);
slack = Screen('GetFlipInterval', window1)/2;
W=rect(RectRight); % screen width
H=rect(RectBottom); % screen height
Screen(window1,'FillRect',backgroundColor);
Screen('TextSize', window1, 32);
Screen('Flip', window1);
HideCursor;

%% dummy call all mex functions for timing help
KbCheck;
WaitSecs(0.1);
GetSecs;
priorityLevel=MaxPriority(window1);
Priority(priorityLevel);

% if USE_DEVICE
%     [ignore hn] = system('hostname'); hn=deblank(hn);
%     addpath(genpath('\Program Files\MATLAB\R2012b\Toolbox\io32'));
%     
%     % set up thermode
%     global THERMODE_PORT; %#ok
%     if strcmp(hn,'INC-DELL-001')
%         config_io;
%         THERMODE_PORT = hex2dec('D050'); % this was copied from an E-prime program that worked on
%         trigger_heat = str2func('TriggerHeat2');
%     else
%         THERMODE_PORT = digitalio('parallel','LPT1');
%         addline(THERMODE_PORT,0:7,'out');
%         trigger_heat = str2func('TriggerHeat');
%     end
    
%% initialize biopac port
if use_biopac
    [ignore hn] = system('hostname'); hn=deblank(hn);
    addpath(genpath('\Program Files\MATLAB\R2012b\Toolbox\io32'));
    global BIOPAC_PORT; %#ok
    if strcmp(hn,'INC-DELL-001')
        BIOPAC_PORT = hex2dec('E050');
        trigger_biopac = str2func('TriggerBiopac2');
    else
        BIOPAC_PORT = digitalio('parallel','LPT2');
        addline(BIOPAC_PORT,0:7,'out');
        trigger_biopac = str2func('TriggerBiopac');
    end
end

if use_eyelink
    
    commandwindow;
    
    dummymode=0;
    
    try
        % STEP 1
        % Added a dialog box to set your own EDF file name before opening
        % experiment graphics. Make sure the entered EDF file name is 1 to 8
        % characters in length and only numbers or letters are allowed.
        prompt = {'Enter tracker EDF file name (1 to 8 letters or numbers)'};
        dlg_title = 'Create EDF file';
        num_lines= 1;
        edfFile = sprintf('%d_%d.EDF',info.subjectid,info.run);
        fprintf('EDFFile: %s\n', edfFile );
        
        % STEP 2
        % Open a graphics window on the main screen
        % using the PsychToolbox's Screen function.
         fprintf('sceen will start\n');
         screenNumber=max(Screen('Screens'));
         fprintf('screen started\n');
%         [window, wRect]=Screen('OpenWindow', screenNumber, 0,[],32,2);
%         Screen(window,'BlendFunction',GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
%         
        
        % STEP 3
        % Provide Eyelink with details about the graphics environment
        % and perform some initializations. The information is returned
        % in a structure that also contains useful defaults
        % and control codes (e.g. tracker state bit and Eyelink key values).
        el=EyelinkInitDefaults(window);
       
        % STEP 4
        % Initialization of the connection with the Eyelink Gazetracker.
        % exit program if this fails.
        
        if ~EyelinkInit(dummymode)
            fprintf('Eyelink Init aborted.\n');
            % cleanup;
            % function cleanup
            Eyelink('Shutdown');
            Screen('CloseAll');
            commandwindow;
            return;
        end
        
        % the following code is used to check the version of the eye tracker
        % and version of the host software
        sw_version = 0;
        [v vs]=Eyelink('GetTrackerVersion');
        fprintf('Running experiment on a ''%s''tracker.\n', vs );
        fprintf('tracker version v=%d\n', v);
        
       
        % open file to record data to
        i = Eyelink('Openfile', edfFile);
        if i~=0
            fprintf('Cannot create EDF file ''%s'' ', edffilename);
            % cleanup;
            % function cleanup
            Eyelink('Shutdown');
            Screen('CloseAll');
            commandwindow;
            return;
        end
        

        Eyelink('command', 'add_file_preamble_text ''Recorded by EyelinkToolbox demo-experiment''');
        [width, height]=Screen('WindowSize', screenNumber);
        
        
        % STEP 5
        % SET UP TRACKER CONFIGURATION
        % Setting the proper recording resolution, proper calibration type,
        % as well as the data file content;
        Eyelink('command','screen_pixel_coords = %ld %ld %ld %ld', 0, 0, width-1, height-1);
        Eyelink('message', 'DISPLAY_COORDS %ld %ld %ld %ld', 0, 0, width-1, height-1);
        % set calibration type.
        Eyelink('command', 'calibration_type = HV9');
        % set parser (conservative saccade thresholds)
        
        
        
        % set EDF file contents using the file_sample_data and
        % file-event_filter commands
        % set link data thtough link_sample_data and link_event_filter
        Eyelink('command', 'file_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
        Eyelink('command', 'link_event_filter = LEFT,RIGHT,FIXATION,SACCADE,BLINK,MESSAGE,BUTTON,INPUT');
        
        % check the software version
        % add "HTARGET" to record possible target data for EyeLink Remote
        if sw_version >=4
            Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,HTARGET,GAZERES,STATUS,INPUT');
            Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,HTARGET,STATUS,INPUT');
        else
            Eyelink('command', 'file_sample_data  = LEFT,RIGHT,GAZE,HREF,AREA,GAZERES,STATUS,INPUT');
            Eyelink('command', 'link_sample_data  = LEFT,RIGHT,GAZE,GAZERES,AREA,STATUS,INPUT');
        end
        
        
        % allow to use the big button on the eyelink gamepad to accept the
        % calibration/drift correction target
        Eyelink('command', 'button_function 5 "accept_target_fixation"');
        
        % make sure we're still connected.
        if Eyelink('IsConnected')~=1 && dummymode == 0
            fprintf('not connected, clean up\n');
            % cleanup;
            % function cleanup
            Eyelink('Shutdown');
            Screen('CloseAll');
            commandwindow;
            return;
        end
        
        
        % STEP 6
        % Calibrate the eye tracker
        % setup the proper calibration foreground and background colors
        el.backgroundcolour = [128 128 128];
        el.calibrationtargetcolour = [0 0 0];
        
        % parameters are in frequency, volume, and duration
        % set the second value in each line to 0 to turn off the sound
        el.cal_target_beep=[600 0.5 0.05];
        el.drift_correction_target_beep=[600 0.5 0.05];
        el.calibration_failed_beep=[400 0.5 0.25];
        el.calibration_success_beep=[800 0.5 0.25];
        el.drift_correction_failed_beep=[400 0.5 0.25];
        el.drift_correction_success_beep=[800 0.5 0.25];
        
        %Setting target size as recommended by Marcu at Eyelink
        el.calibrationtargetsize = 1.8;
        el.calibrationtargetwidth = 0.2;
        
        % you must call this function to apply the changes from above
        EyelinkUpdateDefaults(el);
        
        % Hide the mouse cursor;
        Screen('HideCursorHelper', window);
        EyelinkDoTrackerSetup(el);
    catch exc
        %this "catch" section executes in case of an error in the "try" section
        %above.  Importantly, it closes the onscreen window if its open.
        % cleanup;
        % function cleanup
        getReport(exc,'extended')
        disp('EYELINK CAUGHT')
        Eyelink('Shutdown');
        Screen('CloseAll');
        commandwindow;
    end
    %%%EYELINK STUFF DONE
end

% suppress output in matlab window
% ListenChar(2); 

%% save all subj specific params to this point
save(fname, 'info')

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Run experiment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
if use_eyelink
    % STEP 7.3
    % start recording eye position (preceded by a short pause so that
    % the tracker can finish the mode transition)
    % The paramerters for the 'StartRecording' call controls the
    % file_samples, file_events, link_samples, link_events availability
    Eyelink('Command', 'set_idle_mode');
    WaitSecs(0.05);
    %         Eyelink('StartRecording', 1, 1, 1, 1);
    Eyelink('StartRecording');
    % record a few samples before we actually start displaying
    % otherwise you may lose a few msec of data
    WaitSecs(0.1);
end

try
    %%%%%%%%%%%%%%%%%%%%%
    %% INSTRUCTIONS
    %%%%%%%%%%%%%%%%%%%%%
    DrawFormattedText(window1,instructions,'center','center',textColor);
    Screen('Flip',window1)
    while 1
        [keyIsDown,secs,keyCode] = KbCheck;
        if keyCode(KbName('space'))==1
            break
        end
    end
    DrawFormattedText(window1,waitScan,'center','center',textColor);
    Screen('Flip',window1)
    %% SCANNER TTL TRIG
    while 1
        [keyIsDown,startTR,keyCode] = KbCheck;
        if keyCode(34)==1 %%might need to modify in scanner
            break
        end
    end
    if use_eyelink, Eyelink('Message', 'ttl_start'); end
    %%%%%%%%%%%%%%%%%%%%%
    %% RUN1
    %%%%%%%%%%%%%%%%%%%%%
    Screen('DrawText',window1,fixation,(W/2), (H/2),textColor);
    if use_eyelink, Eyelink('Message', 'R1_startITI');end
    itiStart=Screen('Flip', window1);
    WaitSecs(longITI);itiEnd=GetSecs;
    run=1;
    explog=[info.subid,run,0,0,startTR,0,0,0,itiStart,itiEnd,(itiStart-itiEnd)];
    for Trialnum=1:rtrials
        %draw stimulus
        imdata=imread(sprintf('%s%s',char(info.R1Images(Trialnum)),'.jpg'));%%make sure you have filepath
        tex=Screen('MakeTexture', window1, imdata);
        Screen('DrawTexture', window1, tex);
        if use_eyelink; Eyelink('Message', 'R1_TRIAL_%d', Trialnum); end
        if use_biopac;feval(trigger_biopac,BIOPAC_PULSE_WIDTH);end
        imStart=Screen('Flip', window1);
        WaitSecs(info.stimdurr);imEnd=GetSecs;
        %draw iti
        Screen('DrawText',window1,fixation,(W/2), (H/2),textColor);
        if use_eyelink, Eyelink('Message', 'R1_ITI_%d', Trialnum); end
        itiStart=Screen('Flip', window1);
        WaitSecs(r1ITI(Trialnum));itiEnd=GetSecs;
        %save explog with each iteration
        imNum=str2num(cell2mat(info.R1Images(Trialnum)));
        explog(Trialnum+1,:)=[info.subid,run,Trialnum,imNum,startTR,imStart,imEnd,(imStart-imEnd),itiStart,itiEnd,(itiStart-itiEnd)];
        save(flog,'explog');
    end
    %%%%%%%%%%%%%%%%%%%%%
    %% BREAK INSTRUCTIONS
    %%%%%%%%%%%%%%%%%%%%%
    DrawFormattedText(window1,endrun,'center','center',textColor);
    Screen('Flip',window1)
    while 1
        [keyIsDown,secs,keyCode] = KbCheck;
        if keyCode(KbName('space'))==1 
            break
        end
    end
    DrawFormattedText(window1,waitExper,'center','center',textColor);
    Screen('Flip',window1)
    while 1
        [keyIsDown,secs,keyCode] = KbCheck;
        if keyCode(KbName('space'))==1 
            break
        end
    end
    DrawFormattedText(window1,waitScan,'center','center',textColor);
    Screen('Flip',window1)
    %% SCANNER TTL TRIG
    while 1
        [keyIsDown,startTR,keyCode] = KbCheck;
        if keyCode(34)==1 %%SCANNER
            break
        end
    end
    if use_eyelink, Eyelink('Message', 'ttl_start'); end
    %%%%%%%%%%%%%%%%%%%%%
    %% RUN2
    %%%%%%%%%%%%%%%%%%%%%
    Screen('DrawText',window1,fixation,(W/2), (H/2),textColor);
    if use_eyelink, Eyelink('Message', 'R2_startITI');end
    itiStart=Screen('Flip', window1);
    WaitSecs(longITI);itiEnd=GetSecs;
    run=2;
    explog(length(explog)+1,:)=[info.subid,run,0,0,startTR,0,0,0,itiStart,itiEnd,(itiStart-itiEnd)];
    for Trialnum=1:rtrials
        %draw stimulus
        imdata=imread(sprintf('%s%s',char(info.R2Images(Trialnum)),'.jpg'));%%make sure you have filepath
        tex=Screen('MakeTexture', window1, imdata);
        Screen('DrawTexture', window1, tex);
        if use_eyelink; Eyelink('Message', 'R2_TRIAL_%d', Trialnum); end
        if use_biopac;feval(trigger_biopac,BIOPAC_PULSE_WIDTH);end
        imStart=Screen('Flip', window1);
        WaitSecs(info.stimdurr);imEnd=GetSecs;
        %draw iti
        Screen('DrawText',window1,fixation,(W/2), (H/2),textColor);
        if use_eyelink, Eyelink('Message', 'R2_ITI_%d', Trialnum); end
        itiStart=Screen('Flip', window1);
        WaitSecs(r2ITI(Trialnum));itiEnd=GetSecs;
        %save explog with each iteration
        imNum=str2num(cell2mat(info.R1Images(Trialnum)));
        explog(length(explog)+1,:)=[info.subid,run,Trialnum,imNum,startTR,imStart,imEnd,(imStart-imEnd),itiStart,itiEnd,(itiStart-itiEnd)];
        save(flog,'explog');
    end
    %%%%%%%%%%%%%%%%%%%%%
    %% END SCREEN
    %%%%%%%%%%%%%%%%%%%%%
    DrawFormattedText(window1,endexper,'center','center',textColor);
    Screen('Flip',window1)
    while 1
        [keyIsDown,secs,keyCode] = KbCheck;
        if keyCode(KbName('space'))==1 
            break
        end
    end
catch
    Screen('CloseAll');
    ShowCursor;
    fclose('all');
    Priority(0);
    psychrethrow(psychlasterror);    
end
%%%%%%%%%%%%%%%%%%%%%
%% END EYELINK
%%%%%%%%%%%%%%%%%%%%%
if use_eyelink
    % STEP 8
    % End of Experiment; close the file first
    % close graphics window, close data file and shut down tracker    
    Eyelink('Command', 'set_idle_mode');
    WaitSecs(0.5);
    Eyelink('CloseFile');
    % download data file
    try
        fprintf('Receiving data file ''%s''\n', edfFile );
        status=Eyelink('ReceiveFile');
        if status > 0
            fprintf('ReceiveFile status %d\n', status);
        end
        if 2==exist(edfFile, 'file')
            fprintf('Data file ''%s'' can be found in ''%s''\n', edfFile, pwd );
        end
    catch
        fprintf('Problem receiving data file ''%s''\n', edfFile );
    end
    % STEP 9
    % cleanup;
    % function cleanup
    Eyelink('Shutdown');
end
%%%%%%%%%%%%%%%%%%%%%
%% CLEAN UP
%%%%%%%%%%%%%%%%%%%%%
Screen('CloseAll');
ShowCursor;
fclose('all');
Priority(0); 
% ListenChar(0);% Restore keyboard output to Matlab
 
%%convert GAPED names in saved file

%             fprintf(datafilepointer,'%i %i %s %i %s %i %s %i %i %i\n', ...
%                 subNo, ...
%                 hand, ...
%                 phaselabel, ...
%                 trial, ...
%                 resp, ...
%                 objnumber(trial), ...
%                 char(objname(trial)), ...
%                 objtype(trial), ...
%                 ac, ...
%                 rt);
           

%%%% debugging options
% test keyboard
% A simple program that gets key presses and displays the key pressed!
% % function keyboardintro
% % 
% % KbName('UnifyKeyNames');
% % 
% % escapeKey = KbName('ESCAPE');
% % while KbCheck; end % Wait until all keys are released.
% % 
% % while 1
% %  % Check the state of the keyboard.
% % [ keyIsDown, seconds, keyCode ] = KbCheck;
% % 
% %  % If the user is pressing a key, then display its code number and name.
% %  if keyIsDown
% % 
% %  % Note that we use find(keyCode) because keyCode is an array.
% %  % See 'help KbCheck'
% %  fprintf('You pressed key %i which is %s\n', find(keyCode), KbName(keyCode));
% % 
% %  if keyCode(escapeKey)
% %  break;
% %  end
% %  
% %  % If the user holds down a key, KbCheck will report multiple events.
% %  % To condense multiple 'keyDown' events into a single event, we wait until all!
% %  % keys have been released.
% %  end
% % end 
sca;
