'
'
'
'	C:\Documents and Settings\Ethan Kross\Desktop\DPSP Scripts\Time 2\Time 2 Follow Up Scripts\SP_Pain_T2_Script.ebs
'	Generated on: 5/29/2008	17:17:07
'
'
'	This file generated with E-Studio interface.
'	E-Prime Copyright © 1996-2005 Psychology Software Tools.
'	ALL RIGHTS RESERVED
'
'	Legal use of this experiment script requires a full E-Prime or Runtime License.
'
'
'	Author:
'		Matthew Davidson (SCAN Lab)
'
'
'
'

Option CStrings On
Dim ebContext as Context


'--------------------------------------------------------------------------
' Class Declarations
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
'InitTextDisplayDefaults
'--------------------------------------------------------------------------
Sub InitTextDisplayDefaults(theTextDisplay As TextDisplay)

	If theTextDisplay Is Nothing Then Exit Sub

	theTextDisplay.X = "center"
	theTextDisplay.Y = "center"
	theTextDisplay.Width = "100%"
	theTextDisplay.Height = "100%"
	theTextDisplay.ForeColor = CColor("black")
	theTextDisplay.BackColor = CColor("white")
	theTextDisplay.BackStyle = "opaque"
	theTextDisplay.BorderColor = CColor("black")
	theTextDisplay.BorderWidth = CLng("0")
	theTextDisplay.XAlign = "center"
	theTextDisplay.YAlign = "center"
	theTextDisplay.AlignHorizontal = "center"
	theTextDisplay.AlignVertical = "center"
	theTextDisplay.WordWrap = True
	theTextDisplay.ClearAfter = CLogical("No")
	theTextDisplay.FontName = "Courier New"
	theTextDisplay.FontSize = "18"
	theTextDisplay.FontBold = CLogical("Yes")
	theTextDisplay.FontItalic = CLogical("No")
	theTextDisplay.FontUnderline = CLogical("No")
	theTextDisplay.FontStrikeout = CLogical("No")

End Sub





'--------------------------------------------------------------------------
'InitSlideStateDefaults
'--------------------------------------------------------------------------
Sub InitSlideStateDefaults(theSlideState As SlideState)

	If theSlideState Is Nothing Then Exit Sub

	theSlideState.X = "center"
	theSlideState.Y = "center"
	theSlideState.Width = "100%"
	theSlideState.Height = "100%"
	theSlideState.BackColor = CColor("white")
	theSlideState.BackStyle = "opaque"
	theSlideState.BorderColor = CColor("black")
	theSlideState.BorderWidth = CLng("0")
	theSlideState.XAlign = "center"
	theSlideState.YAlign = "center"
	theSlideState.ClearAfter = CLogical("No")
	theSlideState.Enabled = CLogical("Yes")

End Sub

'--------------------------------------------------------------------------
'InitSlideVisualStimDefaults
'--------------------------------------------------------------------------
Sub InitSlideVisualStimDefaults(theSlideVisualStim As SlideVisualStim)

	If theSlideVisualStim Is Nothing Then Exit Sub

	theSlideVisualStim.X = "center"
	theSlideVisualStim.Y = "center"
	theSlideVisualStim.Width = "25%"
	theSlideVisualStim.Height = "25%"
	theSlideVisualStim.ForeColor = CColor("black")
	theSlideVisualStim.BackColor = CColor("white")
	theSlideVisualStim.BackStyle = "opaque"
	theSlideVisualStim.BorderColor = CColor("black")
	theSlideVisualStim.BorderWidth = CLng("0")
	theSlideVisualStim.XAlign = "center"
	theSlideVisualStim.YAlign = "center"
	theSlideVisualStim.AlignHorizontal = "center"
	theSlideVisualStim.AlignVertical = "center"

End Sub

'--------------------------------------------------------------------------
'InitSlideTextDefaults
'--------------------------------------------------------------------------
Sub InitSlideTextDefaults(theSlideText As SlideText)

	If theSlideText Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideText

	theSlideText.WordWrap = True
	theSlideText.FontName = "Courier New"
	theSlideText.FontSize = "18"
	theSlideText.FontBold = CLogical("Yes")
	theSlideText.FontItalic = CLogical("No")
	theSlideText.FontUnderline = CLogical("No")
	theSlideText.FontStrikeout = CLogical("No")

End Sub

'--------------------------------------------------------------------------
'InitSlideImageDefaults
'--------------------------------------------------------------------------
Sub InitSlideImageDefaults(theSlideImage As SlideImage)

	If theSlideImage Is Nothing Then Exit Sub

	InitSlideVisualStimDefaults theSlideImage

	theSlideImage.Stretch = CLogical("No")
	theSlideImage.MirrorLeftRight = CLogical("No")
	theSlideImage.MirrorUpDown = CLogical("No")
	theSlideImage.UseSourceColorKey = CLogical("No")
	theSlideImage.SourceColorKey = CColor("black")

End Sub

'--------------------------------------------------------------------------
'InitSlideSoundBufferDefaults
'--------------------------------------------------------------------------
Sub InitSlideSoundBufferDefaults(theSoundBuffer As SoundBuffer)

	If theSoundBuffer Is Nothing Then Exit Sub

	theSoundBuffer.Loop = CLogical("No")
	theSoundBuffer.StopAfter = CLogical("Yes")
	theSoundBuffer.StartOffset = "0"
	theSoundBuffer.StopOffset = "0"

End Sub








'--------------------------------------------------------------------------
' Instance Declarations
'--------------------------------------------------------------------------
Dim Display As DisplayDevice
Dim Sound As SoundDevice
Dim Keyboard As KeyboardDevice
Dim Mouse As MouseDevice
Dim SessionProc As Procedure

Dim TrialList As List

Dim T2Proc As Procedure

Dim txtIntro As TextDisplay
Dim txtIntroEchoClients As EchoClientCollection

Dim AudioSlide1 As Slide
Dim AudioSlide1_State As SlideState
Dim AudioSlide1_SlideSoundOut As SlideSoundOut
Dim AudioSlide1_SoundBuffer As SoundBuffer
Dim AudioSlide1_SoundBufferInfo As SoundBufferInfo

Dim ContinueSpace1 As Slide
Dim ContinueSpace1EchoClients As EchoClientCollection
Dim ContinueSpace1_State As SlideState

Dim AudioSlide2 As Slide
Dim AudioSlide2_State As SlideState
Dim AudioSlide2_SlideSoundOut As SlideSoundOut
Dim AudioSlide2_SoundBuffer As SoundBuffer
Dim AudioSlide2_SoundBufferInfo As SoundBufferInfo

Dim ContinueIn60Sec As Slide
Dim ContinueIn60Sec_State As SlideState

Dim txtOutro As TextDisplay
Dim txtOutroEchoClients As EchoClientCollection



'--------------------------------------------------------------------------
' Package Declare Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' User Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Global Script
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Package Routines
'--------------------------------------------------------------------------



'--------------------------------------------------------------------------
' Implementation
'--------------------------------------------------------------------------
Sub SessionProc_Run(c as Context)
	TrialList.Run c

	 


#If RUNTIME_VERSION_MAJOR > 1  Or (RUNTIME_VERSION_MAJOR = 1 And RUNTIME_VERSION_MINOR >= 2) Then
	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information
#End If


	c.Log
End Sub

Sub T2Proc_Run(c as Context)
	
	
	txtIntro.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		txtIntroEchoClients.RemoveAll
		txtIntro.InputMasks.Add Keyboard.CreateInputMask("{SPACE}", "", CLng(txtIntro.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	txtIntro.Run
	
	
	Select Case AudioSlide1.ActiveState
		Case "Default"


			Set AudioSlide1_SlideSoundOut = CSlideSoundOut(AudioSlide1.States.Item("Default").Objects(1))
			Set AudioSlide1_SoundBuffer = AudioSlide1_SlideSoundOut.Buffers(1)
			Set AudioSlide1_SoundBuffer = Nothing
			Set AudioSlide1_SlideSoundOut = Nothing
	End Select

	AudioSlide1.Run
	
	
	
	Select Case ContinueSpace1.ActiveState
		Case "Default"

	End Select

	
	ContinueSpace1.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		ContinueSpace1EchoClients.RemoveAll
		ContinueSpace1.InputMasks.Add Keyboard.CreateInputMask("{SPACE}", "", CLng(ContinueSpace1.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	ContinueSpace1.Run
	
	c.SetAttrib ContinueSpace1.Name & ".OnsetDelay", ContinueSpace1.OnsetDelay
	c.SetAttrib ContinueSpace1.Name & ".OnsetTime", ContinueSpace1.OnsetTime
	c.SetAttrib ContinueSpace1.Name & ".DurationError", ContinueSpace1.DurationError
	c.SetAttrib ContinueSpace1.Name & ".RTTime", ContinueSpace1.RTTime
	c.SetAttrib ContinueSpace1.Name & ".ACC", ContinueSpace1.ACC
	c.SetAttrib ContinueSpace1.Name & ".RT", ContinueSpace1.RT
	c.SetAttrib ContinueSpace1.Name & ".RESP", ContinueSpace1.RESP
	c.SetAttrib ContinueSpace1.Name & ".CRESP", ContinueSpace1.CRESP
	
	
	
	Select Case AudioSlide2.ActiveState
		Case "Default"


			Set AudioSlide2_SlideSoundOut = CSlideSoundOut(AudioSlide2.States.Item("Default").Objects(1))
			Set AudioSlide2_SoundBuffer = AudioSlide2_SlideSoundOut.Buffers(1)
			Set AudioSlide2_SoundBuffer = Nothing
			Set AudioSlide2_SlideSoundOut = Nothing
	End Select

	AudioSlide2.Run
	
	
	
	Select Case ContinueIn60Sec.ActiveState
		Case "Default"

	End Select

	ContinueIn60Sec.Run
	
	
	
	txtOutro.InputMasks.Reset
	
	If Keyboard.GetState() = ebStateOpen Then
		txtOutroEchoClients.RemoveAll
		txtOutro.InputMasks.Add Keyboard.CreateInputMask("q", "", CLng(txtOutro.Duration), CLng("1"), ebEndResponseActionTerminate, CLogical("Yes"), "", "", "ResponseMode:All ProcessBackspace:Yes")

	
	End If

	txtOutro.Run
	c.SetAttrib ContinueSpace1.Name & ".OnsetDelay", ContinueSpace1.OnsetDelay
	c.SetAttrib ContinueSpace1.Name & ".OnsetTime", ContinueSpace1.OnsetTime
	c.SetAttrib ContinueSpace1.Name & ".DurationError", ContinueSpace1.DurationError
	c.SetAttrib ContinueSpace1.Name & ".RTTime", ContinueSpace1.RTTime
	c.SetAttrib ContinueSpace1.Name & ".ACC", ContinueSpace1.ACC
	c.SetAttrib ContinueSpace1.Name & ".RT", ContinueSpace1.RT
	c.SetAttrib ContinueSpace1.Name & ".RESP", ContinueSpace1.RESP
	c.SetAttrib ContinueSpace1.Name & ".CRESP", ContinueSpace1.CRESP
	

	c.Log
End Sub











'--------------------------------------------------------------------------
' InitDevices
'
'--------------------------------------------------------------------------
Sub InitDevices(c As Context)



	SetOSThreadPriority 3


	Set Display = New DisplayDevice
	Display.Name = "Display"

	Dim DisplayDisplayDeviceInfo As DisplayDeviceInfo
	DisplayDisplayDeviceInfo.XRes = 640
	DisplayDisplayDeviceInfo.YRes = 480
	DisplayDisplayDeviceInfo.ColorDepth = 16
	DisplayDisplayDeviceInfo.RefreshRate = 0
	DisplayDisplayDeviceInfo.NumPages = 0
	
	'Load values from context if they exist
	If c.AttribExists(Display.Name & ".XRes") Then DisplayDisplayDeviceInfo.XRes = CLng(c.GetAttrib(Display.Name & ".XRes"))
	If c.AttribExists(Display.Name & ".YRes") Then DisplayDisplayDeviceInfo.YRes = CLng(c.GetAttrib(Display.Name & ".YRes"))
	If c.AttribExists(Display.Name & ".ColorDepth") Then DisplayDisplayDeviceInfo.ColorDepth = CLng(c.GetAttrib(Display.Name & ".ColorDepth"))

	'Open the device, unless the context values indicate otherwise
	Dim DisplayOpen As Boolean
	DisplayOpen = True
	If c.AttribExists(Display.Name & ".Open") Then DisplayOpen = CLogical(c.GetAttrib(Display.Name & ".Open"))
	If DisplayOpen = True Then
		Display.Open DisplayDisplayDeviceInfo
		c.SetAttrib Display.Name & ".RefreshRate", Format$(Display.CalculatedRefreshRate, "0.000")
	End If

	Set Sound = New SoundDevice
	Sound.Name = "Sound"

	Dim SoundSoundOutDeviceInfo As SoundDeviceInfo
	SoundSoundOutDeviceInfo.Channels = 2
	SoundSoundOutDeviceInfo.SamplesPerSecond = 44100
	SoundSoundOutDeviceInfo.BitsPerSample = 16
	'Load values from context if they exist
	If c.AttribExists(Sound.Name & ".Channels") Then SoundSoundOutDeviceInfo.Channels = CLng(c.GetAttrib(Sound.Name & ".Channels"))
	If c.AttribExists(Sound.Name & ".SamplesPerSecond") Then SoundSoundOutDeviceInfo.SamplesPerSecond = CLng(c.GetAttrib(Sound.Name & ".SamplesPerSecond"))
	If c.AttribExists(Sound.Name & ".BitsPerSample") Then SoundSoundOutDeviceInfo.BitsPerSample = CLng(c.GetAttrib(Sound.Name & ".BitsPerSample"))

	'Open the device, unless the context values indicate otherwise
	Dim SoundOpen As Boolean
	SoundOpen = True
	If c.AttribExists(Sound.Name & ".Open") Then SoundOpen = CLogical(c.GetAttrib(Sound.Name & ".Open"))
	If SoundOpen = True Then
		Sound.Open SoundSoundOutDeviceInfo
	End If

	Set Keyboard = New KeyboardDevice
	Keyboard.Name = "Keyboard"

	Dim KeyboardKeyboardDeviceInfo as KeyboardDeviceInfo
	KeyboardKeyboardDeviceInfo.CollectionMode = ebPressesOnly
	KeyboardKeyboardDeviceInfo.CapsLock = ebCapsLockOff
	KeyboardKeyboardDeviceInfo.NumLock = ebNumLockOn
	'Load values from context if they exist
	If c.AttribExists(Keyboard.Name & ".CollectionMode") Then KeyboardKeyboardDeviceInfo.CollectionMode = CLng(c.GetAttrib(Keyboard.Name & ".CollectionMode"))
	If c.AttribExists(Keyboard.Name & ".CapsLock") Then KeyboardKeyboardDeviceInfo.CapsLock = CLng(c.GetAttrib(Keyboard.Name & ".CapsLock"))
	If c.AttribExists(Keyboard.Name & ".NumLock") Then KeyboardKeyboardDeviceInfo.NumLock = CLng(c.GetAttrib(Keyboard.Name & ".NumLock"))
	If c.AttribExists(Keyboard.Name & ".EmulateDeviceName") Then KeyboardKeyboardDeviceInfo.EmulateDeviceName = c.GetAttrib(Keyboard.Name & ".EmulateDeviceName")

	'Open the device, unless the context values indicate otherwise
	Dim KeyboardOpen As Boolean
	KeyboardOpen = True
	If c.AttribExists(Keyboard.Name & ".Open") Then KeyboardOpen = CLogical(c.GetAttrib(Keyboard.Name & ".Open"))
	If KeyboardOpen = True Then
		Keyboard.Open KeyboardKeyboardDeviceInfo
	End If

	Set Mouse = New MouseDevice
	Mouse.Name = "Mouse"

	Dim MouseMouseDeviceInfo as MouseDeviceInfo
	MouseMouseDeviceInfo.OpenMode = ebMouseOpenModeDirect
	MouseMouseDeviceInfo.CollectionMode = ebPressesOnly
	MouseMouseDeviceInfo.ShowCursor = False
	'Load values from context if they exist
	If c.AttribExists(Mouse.Name & ".OpenMode") Then MouseMouseDeviceInfo.OpenMode = CLng(c.GetAttrib(Mouse.Name & ".OpenMode"))
	If c.AttribExists(Mouse.Name & ".CollectionMode") Then MouseMouseDeviceInfo.CollectionMode = CLng(c.GetAttrib(Mouse.Name & ".CollectionMode"))
	If c.AttribExists(Mouse.Name & ".ShowCursor") Then MouseMouseDeviceInfo.ShowCursor = CLogical(c.GetAttrib(Mouse.Name & ".ShowCursor"))
	If c.AttribExists(Mouse.Name & ".EmulateDeviceName") Then MouseMouseDeviceInfo.EmulateDeviceName = c.GetAttrib(Mouse.Name & ".EmulateDeviceName")

	'Open the device, unless the context values indicate otherwise
	Dim MouseOpen As Boolean
	MouseOpen = True
	If c.AttribExists(Mouse.Name & ".Open") Then MouseOpen = CLogical(c.GetAttrib(Mouse.Name & ".Open"))
	If MouseOpen = True Then
		Mouse.Open MouseMouseDeviceInfo
	End If


	SetOSThreadPriority 0

End Sub



'--------------------------------------------------------------------------
' InitObjects
'
'--------------------------------------------------------------------------
Sub InitObjects(c As Context)

	Set SessionProc = New Procedure
	SessionProc.Name = "SessionProc"
	SessionProc.Tag = ""
	SessionProc.Subroutine = "SessionProc_Run"

	Set TrialList = New List
	TrialList.Name = "TrialList"
	TrialList.Tag = ""

	'Initialization for TrialList
	
	Set TrialList.Order = New SequentialOrder
	Set TrialList.Deletion = NoDeletion
	TrialList.ResetEveryRun = False

	' Create the column headings
	TrialList.Filename = ""
	TrialList.LoadMethod = ebLoadMethodEmbedded

	TrialList.Load

	Set TrialList.TerminateCondition = Cycles(1)
	Set TrialList.ResetCondition = Samples(1)
	TrialList.Reset
	
	Set T2Proc = New Procedure
	T2Proc.Name = "T2Proc"
	T2Proc.Tag = ""
	T2Proc.Subroutine = "T2Proc_Run"

	Set txtIntro = New TextDisplay
	txtIntro.Name = "txtIntro"
	txtIntro.Tag = ""

	Set txtIntroEchoClients = New EchoClientCollection

	InitTextDisplayDefaults txtIntro

	txtIntro.Text = "Welcome back to the study.\n\nPlease make sure the headphones are attached to the computer and in place.\n\nPress the spacebar to begin."
	txtIntro.BackColor = CColor("255,250,132")
	txtIntro.FontName = "Trebuchet MS"
	txtIntro.Duration = CLng("-1")
	txtIntro.TimingMode = ebTimingModeEvent
	txtIntro.PreRelease = Val("0")

	txtIntro.OnsetSync = 1
	txtIntro.OffsetSync = 0

	Set AudioSlide1 = New Slide
	AudioSlide1.Name = "AudioSlide1"
	AudioSlide1.Tag = ""
	AudioSlide1.Duration = CLng("-1")
	AudioSlide1.TimingMode = ebTimingModeEvent
	AudioSlide1.PreRelease = Val("0")

	AudioSlide1.OnsetSync = 1
	AudioSlide1.OffsetSync = 0

	Set AudioSlide1_State = New SlideState
	AudioSlide1_State.Name = "Default"

	InitSlideStateDefaults AudioSlide1_State

	AudioSlide1_State.BackColor = CColor("255,250,132")

	AudioSlide1.States.Add AudioSlide1_State, "Default"


	Set AudioSlide1_SlideSoundOut = New SlideSoundOut
	AudioSlide1_SlideSoundOut.Name = "SoundOut1"
	AudioSlide1_SoundBufferInfo.MaxLength = 60000
	AudioSlide1_SoundBufferInfo.VolumeControl = CLogical("no")
	AudioSlide1_SoundBufferInfo.PanControl = CLogical("no")
	Set AudioSlide1_SoundBuffer = Sound.CreateBuffer(AudioSlide1_SoundBufferInfo)
	AudioSlide1_SlideSoundOut.Buffers.Add AudioSlide1_SoundBuffer
	AudioSlide1.States.Item("Default").Objects.Add AudioSlide1_SlideSoundOut, "SoundOut1"

	AudioSlide1_SoundBuffer.Filename = "audiofiles\\t2-part1.wav"
	AudioSlide1_SoundBuffer.Load

	InitSlideSoundBufferDefaults AudioSlide1_SoundBuffer

	AudioSlide1_SoundBuffer.EndSoundAction = 1
	Set AudioSlide1_SoundBuffer = Nothing
	AudioSlide1.ActiveState = "Default"

	Set ContinueSpace1 = New Slide
	ContinueSpace1.Name = "ContinueSpace1"
	ContinueSpace1.Tag = ""

	Set ContinueSpace1EchoClients = New EchoClientCollection
	ContinueSpace1.Duration = CLng("-1")
	ContinueSpace1.TimingMode = ebTimingModeEvent
	ContinueSpace1.PreRelease = Val("0")

	ContinueSpace1.OnsetSync = 1
	ContinueSpace1.OffsetSync = 0

	Set ContinueSpace1_State = New SlideState
	ContinueSpace1_State.Name = "Default"

	InitSlideStateDefaults ContinueSpace1_State

	ContinueSpace1_State.BackColor = CColor("255,250,132")

	ContinueSpace1.States.Add ContinueSpace1_State, "Default"

	ContinueSpace1.ActiveState = "Default"

	Set AudioSlide2 = New Slide
	AudioSlide2.Name = "AudioSlide2"
	AudioSlide2.Tag = ""
	AudioSlide2.Duration = CLng("-1")
	AudioSlide2.TimingMode = ebTimingModeEvent
	AudioSlide2.PreRelease = Val("0")

	AudioSlide2.OnsetSync = 1
	AudioSlide2.OffsetSync = 0

	Set AudioSlide2_State = New SlideState
	AudioSlide2_State.Name = "Default"

	InitSlideStateDefaults AudioSlide2_State

	AudioSlide2_State.BackColor = CColor("255,250,132")

	AudioSlide2.States.Add AudioSlide2_State, "Default"


	Set AudioSlide2_SlideSoundOut = New SlideSoundOut
	AudioSlide2_SlideSoundOut.Name = "SoundOut1"
	AudioSlide2_SoundBufferInfo.MaxLength = 60000
	AudioSlide2_SoundBufferInfo.VolumeControl = CLogical("no")
	AudioSlide2_SoundBufferInfo.PanControl = CLogical("no")
	Set AudioSlide2_SoundBuffer = Sound.CreateBuffer(AudioSlide2_SoundBufferInfo)
	AudioSlide2_SlideSoundOut.Buffers.Add AudioSlide2_SoundBuffer
	AudioSlide2.States.Item("Default").Objects.Add AudioSlide2_SlideSoundOut, "SoundOut1"

	AudioSlide2_SoundBuffer.Filename = "audiofiles\\t2-part2.wav"
	AudioSlide2_SoundBuffer.Load

	InitSlideSoundBufferDefaults AudioSlide2_SoundBuffer

	AudioSlide2_SoundBuffer.EndSoundAction = 1
	Set AudioSlide2_SoundBuffer = Nothing
	AudioSlide2.ActiveState = "Default"

	Set ContinueIn60Sec = New Slide
	ContinueIn60Sec.Name = "ContinueIn60Sec"
	ContinueIn60Sec.Tag = ""
	ContinueIn60Sec.Duration = CLng("60000")
	ContinueIn60Sec.TimingMode = ebTimingModeEvent
	ContinueIn60Sec.PreRelease = Val("0")

	ContinueIn60Sec.OnsetSync = 1
	ContinueIn60Sec.OffsetSync = 0

	Set ContinueIn60Sec_State = New SlideState
	ContinueIn60Sec_State.Name = "Default"

	InitSlideStateDefaults ContinueIn60Sec_State

	ContinueIn60Sec_State.BackColor = CColor("255,250,132")

	ContinueIn60Sec.States.Add ContinueIn60Sec_State, "Default"

	ContinueIn60Sec.ActiveState = "Default"

	Set txtOutro = New TextDisplay
	txtOutro.Name = "txtOutro"
	txtOutro.Tag = ""

	Set txtOutroEchoClients = New EchoClientCollection

	InitTextDisplayDefaults txtOutro

	txtOutro.Text = "You may now take off the headphones and continue with the written portion of the experiment:\n\nPlease locate the manila folder to the right of the co" &_ 
				"mputer.\n\nTake out the booklet and pen from the folder, and follow the instructions on each page.\n\n"
	txtOutro.BackColor = CColor("255,250,132")
	txtOutro.FontName = "Trebuchet MS"
	txtOutro.Duration = CLng("-1")
	txtOutro.TimingMode = ebTimingModeEvent
	txtOutro.PreRelease = Val("0")

	txtOutro.OnsetSync = 1
	txtOutro.OffsetSync = 0


End Sub


'--------------------------------------------------------------------------
' InitPackages
'
'--------------------------------------------------------------------------
Sub InitPackages(c As Context)

End Sub



'--------------------------------------------------------------------------
' InitGlobals
'
'--------------------------------------------------------------------------
Sub InitGlobals(c As Context)

End Sub



'--------------------------------------------------------------------------


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitGlobals
'--------------------------------------------------------------------------
Sub UnInitGlobals()
End Sub
'--------------------------------------------------------------------------
' UnInitDevices
'--------------------------------------------------------------------------
Sub UnInitDevices()
	Display.Close
	Set Display = Nothing
	Sound.Close

	Keyboard.Close
	Set Keyboard = Nothing

	Mouse.Close
	Set Mouse = Nothing

End Sub


'--------------------------------------------------------------------------
'--------------------------------------------------------------------------
' UnInitPackages
'--------------------------------------------------------------------------
Sub UnInitPackages()
End Sub


'--------------------------------------------------------------------------
' UnInitObjects
'
'--------------------------------------------------------------------------
Sub UnInitObjects()

	Set SessionProc = Nothing

	Set TrialList = Nothing

	Set T2Proc = Nothing

	Set txtIntro = Nothing

	Set txtIntroEchoClients = Nothing

	Set AudioSlide1 = Nothing

	Set ContinueSpace1 = Nothing

	Set ContinueSpace1EchoClients = Nothing

	Set AudioSlide2 = Nothing

	Set ContinueIn60Sec = Nothing

	Set txtOutro = Nothing

	Set txtOutroEchoClients = Nothing


End Sub


'--------------------------------------------------------------------------
' Main
'
'--------------------------------------------------------------------------
Sub Main()

	' Create and initialize the default context, data file,
	' and provide global access to the context.
	Dim c As Context
	Set c = New Context
	Set c.DataFile = New DataFile
	c.PushNewFrame
	Set ebContext = c

	' Set the log level names
	c.SetLogLevelName 1, "Session"
	c.SetLogLevelName 2, "Block"
	c.SetLogLevelName 3, "Trial"
	c.SetLogLevelName 4, "SubTrial"
	c.SetLogLevelName 5, "LogLevel5"
	c.SetLogLevelName 6, "LogLevel6"
	c.SetLogLevelName 7, "LogLevel7"
	c.SetLogLevelName 8, "LogLevel8"
	c.SetLogLevelName 9, "LogLevel9"
	c.SetLogLevelName 10, "LogLevel10"

	' Set standard logging items
	ebContext.SetAttrib "Experiment", "SP_Pain_T2_Script"
	ebContext.SetAttrib "SessionDate", Date$
	ebContext.SetAttrib "SessionTime", Time$
	ebContext.SetAttrib "RandomSeed", PRNG.GetSeed()
	' Set default for GroupNumber
	c.SetAttrib "Group", "1"

	'Initialize global variables for packages
	InitGlobals c

	CreateDefaultPort

	If Basic.OS = ebWin32 Then
		WinActivate "E-Run Experiment Window"
	End If

	' Get the StartupInfo

	' Set the defaults for all of the StartupInfo
	If Not c.AttribExists("Subject") Then c.SetAttrib "Subject", "1"
	If Not c.AttribExists("Session") Then c.SetAttrib "Session", "1"

	' Determine if StartupInfo.UseDefaults exists and is True/False to override prompts for StartupInfo parameters
	Dim bStartupInfoUseDefaults As Boolean
	bStartupInfoUseDefaults = False
	If c.AttribExists("StartupInfo.UseDefaults") Then bStartupInfoUseDefaults = CLogical(c.GetAttrib("StartupInfo.UseDefaults"))
	If Not bStartupInfoUseDefaults Then

		Dim vAnswer As Variant
StartupInfo_Begin:

StartupInfoPrompt_Subject:
		vAnswer = AskBox("Please enter the Subject Number (1-32767, 0=No Data Logging):", c.GetAttrib("Subject"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) < 0 Then
				MsgBox "The value for Subject must not be less than 0"
				GoTo StartupInfoPrompt_Subject
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Subject must be not be greater than 32767"
				GoTo StartupInfoPrompt_Subject
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Subject", CStr(vAnswer)

StartupInfoPrompt_Session:
		vAnswer = AskBox("Please enter the Session Number (1-32767):", c.GetAttrib("Session"))
		If Not IsEmpty(vAnswer) then
			If Not IsNumeric(vAnswer) then
				MsgBox "Please enter an integer value"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) < 1 Then
				MsgBox "The value for Session must not be less than 1"
				GoTo StartupInfoPrompt_Session
			ElseIf CLng(vAnswer) > 32767 Then
				MsgBox "The value for Session must be not be greater than 32767"
				GoTo StartupInfoPrompt_Session
			End If
		Else
			GoTo ExperimentAbort
		End if

		c.SetAttrib "Session", CStr(vAnswer)

		' Display the summary
		Dim strSummary As String
		strSummary = "Subject:    " & c.GetAttrib("Subject") & "\n"
		strSummary = strSummary & "Session:    " & c.GetAttrib("Session") & "\n"
		strSummary = strSummary & "\nContinue with the above startup info?"

		Dim nSummaryAnswer As Integer
		nSummaryAnswer = MsgBox(strSummary, ebYesNoCancel + ebQuestion, "Summary of Startup Info")
		If nSummaryAnswer = ebNo Then
				GoTo StartupInfo_Begin
		ElseIf nSummaryAnswer = ebCancel Then
				GoTo ExperimentAbort
		End If

	End If


	'If the attribute Clock.Scale.Override exists
	'  then use it for to set the Clock.Scale value
	If c.AttribExists("Clock.Scale.Override") Then
		Clock.Scale = CDbl(c.GetAttrib("Clock.Scale.Override"))
	End If

	' Set the Filenames for the data files
	Dim strFilenameRecovery As String
	Dim strFilenameEDAT As String

	'If the attribute DataFile.Filename.Override exists
	'  then use it for the .txt and .edat filenames
	If c.AttribExists("DataFile.Filename.Override") Then

		' Set the default Data Filename
		strFilenameRecovery = CStr(c.GetAttrib("DataFile.Filename.Override")) & ".txt"
		strFilenameEDAT = CStr(c.GetAttrib("DataFile.Filename.Override")) & ".edat"

	Else

		' Set the default Data Filename
		strFilenameRecovery = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session")) & ".txt"
		strFilenameEDAT = CStr(c.GetAttrib("Experiment")) & "-" & CStr(c.GetAttrib("Subject")) & "-" & CStr(c.GetAttrib("Session")) & ".edat"

	End If

	'Set the name of the data file
	c.DataFile.Filename = strFilenameRecovery

	' If we are logging data, then prompt to overwrite the data file if it exists
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		If FileExists(c.DataFile.Filename) Or FileExists(strFilenameEDAT) Then
			If ebYes <> MsgBox("WARNING: The data file and/or recovery file already exists:\nFILE: " & c.DataFile.Filename & "\n\nDo you want to overwrite?", ebYesNo + ebQuestion) Then
				GoTo ExperimentAbort
			End If
		End If
	End If

	' Initialize all system devices, packages, and objects
	InitDevices c
	InitPackages c
	InitObjects c

	' If we are logging data, then open the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Open
		c.LogHeader
	End If



#If RUNTIME_VERSION_MAJOR > 1  Or (RUNTIME_VERSION_MAJOR = 1 And RUNTIME_VERSION_MINOR >= 2) Then
	' Log clock timing information
	c.SetAttrib "Clock.Information", Clock.Information
#End If

	' Start the running of the Experiment
	SessionProc.Run c

	' Clean up the context and close the datafile
	If CLng(c.GetAttrib("Subject")) <> 0 Then
		c.DataFile.Close
		' Attempt to convert the recovery file into a data file
		Dim nConvert As Long
		nConvert = c.DataFile.Convert(ebProgressSimple)
		If nConvert = 0 Then
			' Settings in E-Studio are set to not remove E-Recovery file
		Else
			' The datafile failed to convert!
			MsgBox "ERROR: The datafile did not convert!\nFILE: " & c.DataFile.Filename & "\n\nIt is recommended that you recover your data with the E-Recovery utility"
			MsgBox c.DataFile.GetLastErrorMessage()
		End If
	End If
ExperimentFinish:

	UnInitObjects

	UnInitPackages
	UnInitDevices

	UnInitGlobals

ExperimentAbort:

	' Clean up the context
	c.PopFrame
	Set c = Nothing
	Set ebContext = Nothing

	DestroyDefaultPort

End Sub


[DataSection_TrialList(1)]
Weight	Nested	Procedure
1		T2Proc\0